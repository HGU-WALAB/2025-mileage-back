<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.csee.swplus.mileage.milestone.mapper.MilestoneMapper">

    <select id="findAllMilestoneCapability" resultType="com.csee.swplus.mileage.milestone.dto.response.MilestoneResponseDto">
        SELECT id AS capabilityId,
               name AS capabilityName,
               description AS description
        FROM _sw_milestone;
    </select>

    <select id="findAllMilestonePoint" resultType="com.csee.swplus.mileage.milestone.dto.response.MilestonePointResponseDto">
        SELECT
            m.id AS capabilityId,
            m.name AS capabilityName,
            IFNULL(COUNT(DISTINCT CASE WHEN s.snum = #{studentId} THEN r.subitem_id END), 0) AS milestoneCount,
            IFNULL(COUNT(DISTINCT si.id), 0) AS totalMilestoneCount
        FROM _sw_milestone m
                 LEFT JOIN _sw_category_milestone cm
                           ON m.id = cm.milestone_id
                 LEFT JOIN _sw_mileage_category c
                           ON cm.category_id = c.id
                 LEFT JOIN _sw_mileage_subitem si
                           ON c.id = si.category_id
                 LEFT JOIN _sw_mileage_record r
                           ON si.id = r.subitem_id
                 LEFT JOIN _sw_student s ON r.snum = s.snum
        GROUP BY
            m.id,
            m.name
        ORDER BY
            m.id;
    </select>
    <select id="findFilteredAverageMilestonePoint"
            resultType="com.csee.swplus.mileage.milestone.dto.response.MPResponseDto">
        SELECT
        m.id AS capabilityId,
        m.name AS capabilityName,
        COALESCE(SUM(CASE WHEN milestone_counts.milestone_id IS NOT NULL THEN milestone_counts.milestone_count ELSE 0 END), 0) AS totalMilestoneCount,
        (SELECT COUNT(DISTINCT s.snum)
        FROM _sw_student s
        WHERE 1=1
        <if test="major != null">
            AND s.major_1 = #{major}
        </if>
        <if test="term != null">
            AND s.semester_count = #{term}
        </if>
        <if test="entryYear != null">
            AND SUBSTRING(s.snum, 2, 2) = #{entryYear}
        </if>
        ) AS groupSize
        FROM
        _sw_milestone m
        LEFT JOIN (
        SELECT
        m.id AS milestone_id,
        COUNT(DISTINCT r.subitem_id) AS milestone_count
        FROM
        _sw_milestone m
        JOIN _sw_category_milestone cm ON m.id = cm.milestone_id
        JOIN _sw_mileage_category c ON cm.category_id = c.id
        JOIN _sw_mileage_subitem si ON c.id = si.category_id
        JOIN _sw_mileage_record r ON si.id = r.subitem_id
        JOIN _sw_student s ON r.snum = s.snum
        WHERE 1=1
        <if test="major != null">
            AND s.major_1 = #{major}
        </if>
        <if test="term != null">
            AND s.semester_count = #{term}
        </if>
        <if test="entryYear != null">
            AND SUBSTRING(s.snum, 2, 2) = #{entryYear}
        </if>
        GROUP BY m.id
        ) milestone_counts ON m.id = milestone_counts.milestone_id
        GROUP BY m.id, m.name
        ORDER BY m.id;
    </select>
    <select id="findSuggestItemByUserId" resultType="java.util.Map">
        <!-- 1단계: 학생의 가장 낮은 역량 찾기 -->
        SELECT
        lc.capabilityName,
        si.subitem_name AS subitemName,
        COUNT(DISTINCT r_pop.snum) AS participantCount
        FROM (
        SELECT
        m.id AS capabilityId,
        m.name AS capabilityName,
        IFNULL(COUNT(DISTINCT CASE WHEN s.snum = #{studentId} THEN r.subitem_id END), 0) AS milestoneCount,
        IFNULL(COUNT(DISTINCT si.id), 0) AS totalMilestoneCount,
        CASE
        WHEN IFNULL(COUNT(DISTINCT si.id), 0) = 0 THEN 0
        ELSE IFNULL(COUNT(DISTINCT CASE WHEN s.snum = #{studentId} THEN r.subitem_id END), 0) /
        IFNULL(COUNT(DISTINCT si.id), 0)
        END AS achievementRate
        FROM _sw_milestone m
        LEFT JOIN _sw_category_milestone cm ON m.id = cm.milestone_id
        LEFT JOIN _sw_mileage_category c ON cm.category_id = c.id
        LEFT JOIN _sw_mileage_subitem si ON c.id = si.category_id
        LEFT JOIN _sw_mileage_record r ON si.id = r.subitem_id
        LEFT JOIN _sw_student s ON r.snum = s.snum
        WHERE EXISTS (
        SELECT 1 FROM _sw_student WHERE snum = #{studentId}
        )
        GROUP BY m.id, m.name
        HAVING totalMilestoneCount > 0
        ORDER BY achievementRate ASC, milestoneCount ASC
        LIMIT 1
        ) AS lc

        /* 2단계: 가장 낮은 역량에 해당하는 활동 중 학생이 참여하지 않은 인기 활동 찾기 */
        JOIN _sw_category_milestone cm ON lc.capabilityId = cm.milestone_id
        JOIN _sw_mileage_category c ON cm.category_id = c.id
        JOIN _sw_mileage_subitem si ON c.id = si.category_id
        LEFT JOIN _sw_mileage_record r_pop ON si.id = r_pop.subitem_id

        /* 학생이 참여하지 않은 활동만 포함 */
        WHERE si.id NOT IN (
        SELECT subitem_id
        FROM _sw_mileage_record
        WHERE snum = #{studentId}
        )
        AND si.id IS NOT NULL

        GROUP BY lc.capabilityName, si.subitem_name
        ORDER BY participantCount DESC
        LIMIT 3;
    </select>
<!-- [피드백 수용 전 코드] 마일스톤 역량 포인트를 마일리지 포인트로 계산함: 관리자 서비스 측 max_point 설정으로 인해 로직 상 문제 발생 -->
<!--    <resultMap id="SemesterResultMap" type="com.csee.swplus.mileage.milestone.dto.response.MilestoneSemesterResponseDto">-->
<!--        <id property="semester" column="semester"/>-->
<!--        <collection property="milestone" ofType="com.csee.swplus.mileage.milestone.dto.response.MilestonePointResponseDto">-->
<!--            <result property="capabilityId" column="capabilityId"/>-->
<!--            <result property="capabilityName" column="capabilityName"/>-->
<!--            <result property="capabilityPoint" column="capabilityPoint"/>-->
<!--        </collection>-->
<!--    </resultMap>-->

<!--    <select id="findEachMilestoneBySemester" resultMap="SemesterResultMap">-->
<!--        SELECT-->
<!--            r.semester,-->
<!--            m.id AS capabilityId,-->
<!--            m.name AS capabilityName,-->
<!--            IFNULL(SUM(r.m_point), 0) AS capabilityPoint-->
<!--        FROM _sw_milestone m-->
<!--                 LEFT JOIN category_milestone cm-->
<!--                           ON m.id = cm.milestone_id-->
<!--                 LEFT JOIN _sw_mileage_category c-->
<!--                           ON cm.category_id = c.id-->
<!--                 LEFT JOIN _sw_mileage_subitem si-->
<!--                           ON c.id = si.category_id-->
<!--                 LEFT JOIN _sw_mileage_record r-->
<!--                           ON si.id = r.subitem_id-->
<!--                 LEFT JOIN _sw_student s ON r.snum = s.snum-->
<!--        WHERE s.id = #{studentId}-->
<!--        GROUP BY-->
<!--            r.semester,-->
<!--            m.id,-->
<!--            m.name-->
<!--        ORDER BY-->
<!--            r.semester,-->
<!--            m.id;-->
<!--    </select>-->

    <select id="findAllMilestoneBySemester" resultType="com.csee.swplus.mileage.milestone.dto.response.MilestoneSemesterTotalPointResponseDto">
        SELECT
            r.semester,
            (SELECT COUNT(DISTINCT r2.subitem_id)
            FROM _sw_mileage_record r2
            WHERE r2.snum = #{studentId}
                AND r2.semester &lt;= r.semester
            ) AS userMilestoneCount
        FROM _sw_mileage_record r
        WHERE r.snum = #{studentId}
        GROUP BY r.semester
        ORDER BY r.semester;
    </select>

</mapper>